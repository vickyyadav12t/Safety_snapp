{"ast":null,"code":"// API Service for SafetySnap\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`Response from ${response.config.url}:`, response.status);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.error('Response error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n  // Handle common errors\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 413) {\n    error.message = 'File too large. Please upload an image smaller than 10MB.';\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 415) {\n    error.message = 'Invalid file type. Please upload a JPEG, PNG, or WebP image.';\n  } else if (error.code === 'ECONNABORTED') {\n    error.message = 'Request timeout. Please try again.';\n  } else if (!error.response) {\n    error.message = 'Network error. Please check your connection.';\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const apiService = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error(`Health check failed: ${error.message}`);\n    }\n  },\n  // Upload and analyze image\n  async uploadAndAnalyzeImage(file, workEnvironment = 'construction') {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n      formData.append('workEnvironment', workEnvironment);\n      const response = await api.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          console.log(`Upload progress: ${percentCompleted}%`);\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(`Upload failed: ${error.message}`);\n    }\n  },\n  // Analyze existing image\n  async analyzeExistingImage(filename, workEnvironment = 'construction') {\n    try {\n      const response = await api.post('/upload/analyze', {\n        filename,\n        workEnvironment\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(`Analysis failed: ${error.message}`);\n    }\n  },\n  // Get list of uploaded files\n  async getUploadedFiles() {\n    try {\n      const response = await api.get('/upload/files');\n      return response.data;\n    } catch (error) {\n      throw new Error(`Failed to fetch files: ${error.message}`);\n    }\n  },\n  // Delete uploaded file\n  async deleteFile(filename) {\n    try {\n      const response = await api.delete(`/upload/${filename}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(`Failed to delete file: ${error.message}`);\n    }\n  }\n};\n\n// Utility functions\nexport const utils = {\n  // Format file size\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n  // Format date\n  formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  },\n  // Get file extension\n  getFileExtension(filename) {\n    return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\n  },\n  // Validate image file\n  validateImageFile(file) {\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    if (!allowedTypes.includes(file.type)) {\n      throw new Error('Invalid file type. Please upload a JPEG, PNG, or WebP image.');\n    }\n    if (file.size > maxSize) {\n      throw new Error('File too large. Please upload an image smaller than 10MB.');\n    }\n    return true;\n  },\n  // Get work environment options\n  getWorkEnvironments() {\n    return [{\n      value: 'construction',\n      label: 'Construction Site',\n      description: 'Hard hat, safety vest, boots, gloves, safety glasses required'\n    }, {\n      value: 'manufacturing',\n      label: 'Manufacturing Plant',\n      description: 'Hard hat, safety glasses, gloves, boots required'\n    }, {\n      value: 'laboratory',\n      label: 'Laboratory',\n      description: 'Safety glasses, gloves required'\n    }, {\n      value: 'healthcare',\n      label: 'Healthcare',\n      description: 'Gloves, safety glasses required'\n    }, {\n      value: 'general',\n      label: 'General Workplace',\n      description: 'Standard PPE requirements'\n    }];\n  },\n  // Get PPE category colors\n  getCategoryColor(category) {\n    const colors = {\n      'head_protection': '#3B82F6',\n      // Blue\n      'visibility': '#F59E0B',\n      // Orange\n      'eye_protection': '#10B981',\n      // Green\n      'hand_protection': '#8B5CF6',\n      // Purple\n      'foot_protection': '#EF4444',\n      // Red\n      'person': '#6B7280' // Gray\n    };\n    return colors[category] || '#6B7280';\n  },\n  // Get recommendation priority color\n  getPriorityColor(priority) {\n    const colors = {\n      'high': '#EF4444',\n      // Red\n      'medium': '#F59E0B',\n      // Orange\n      'low': '#10B981' // Green\n    };\n    return colors[priority] || '#6B7280';\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","_error$response3","data","message","code","apiService","healthCheck","get","Error","uploadAndAnalyzeImage","file","workEnvironment","formData","FormData","append","post","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","analyzeExistingImage","filename","getUploadedFiles","deleteFile","delete","utils","formatFileSize","bytes","k","sizes","i","floor","parseFloat","pow","toFixed","formatDate","dateString","date","Date","toLocaleDateString","toLocaleTimeString","getFileExtension","slice","lastIndexOf","validateImageFile","allowedTypes","maxSize","includes","type","size","getWorkEnvironments","value","label","description","getCategoryColor","category","colors","getPriorityColor","priority"],"sources":["D:/hackk/client/src/services/api.js"],"sourcesContent":["// API Service for SafetySnap\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // 30 seconds timeout\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`Response from ${response.config.url}:`, response.status);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error.response?.data || error.message);\r\n    \r\n    // Handle common errors\r\n    if (error.response?.status === 413) {\r\n      error.message = 'File too large. Please upload an image smaller than 10MB.';\r\n    } else if (error.response?.status === 415) {\r\n      error.message = 'Invalid file type. Please upload a JPEG, PNG, or WebP image.';\r\n    } else if (error.code === 'ECONNABORTED') {\r\n      error.message = 'Request timeout. Please try again.';\r\n    } else if (!error.response) {\r\n      error.message = 'Network error. Please check your connection.';\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API endpoints\r\nexport const apiService = {\r\n  // Health check\r\n  async healthCheck() {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Health check failed: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  // Upload and analyze image\r\n  async uploadAndAnalyzeImage(file, workEnvironment = 'construction') {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', file);\r\n      formData.append('workEnvironment', workEnvironment);\r\n\r\n      const response = await api.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          const percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          console.log(`Upload progress: ${percentCompleted}%`);\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Upload failed: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  // Analyze existing image\r\n  async analyzeExistingImage(filename, workEnvironment = 'construction') {\r\n    try {\r\n      const response = await api.post('/upload/analyze', {\r\n        filename,\r\n        workEnvironment,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Analysis failed: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  // Get list of uploaded files\r\n  async getUploadedFiles() {\r\n    try {\r\n      const response = await api.get('/upload/files');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch files: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  // Delete uploaded file\r\n  async deleteFile(filename) {\r\n    try {\r\n      const response = await api.delete(`/upload/${filename}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to delete file: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n\r\n// Utility functions\r\nexport const utils = {\r\n  // Format file size\r\n  formatFileSize(bytes) {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  },\r\n\r\n  // Format date\r\n  formatDate(dateString) {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\r\n  },\r\n\r\n  // Get file extension\r\n  getFileExtension(filename) {\r\n    return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\r\n  },\r\n\r\n  // Validate image file\r\n  validateImageFile(file) {\r\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\n    const maxSize = 10 * 1024 * 1024; // 10MB\r\n\r\n    if (!allowedTypes.includes(file.type)) {\r\n      throw new Error('Invalid file type. Please upload a JPEG, PNG, or WebP image.');\r\n    }\r\n\r\n    if (file.size > maxSize) {\r\n      throw new Error('File too large. Please upload an image smaller than 10MB.');\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  // Get work environment options\r\n  getWorkEnvironments() {\r\n    return [\r\n      { value: 'construction', label: 'Construction Site', description: 'Hard hat, safety vest, boots, gloves, safety glasses required' },\r\n      { value: 'manufacturing', label: 'Manufacturing Plant', description: 'Hard hat, safety glasses, gloves, boots required' },\r\n      { value: 'laboratory', label: 'Laboratory', description: 'Safety glasses, gloves required' },\r\n      { value: 'healthcare', label: 'Healthcare', description: 'Gloves, safety glasses required' },\r\n      { value: 'general', label: 'General Workplace', description: 'Standard PPE requirements' }\r\n    ];\r\n  },\r\n\r\n  // Get PPE category colors\r\n  getCategoryColor(category) {\r\n    const colors = {\r\n      'head_protection': '#3B82F6', // Blue\r\n      'visibility': '#F59E0B', // Orange\r\n      'eye_protection': '#10B981', // Green\r\n      'hand_protection': '#8B5CF6', // Purple\r\n      'foot_protection': '#EF4444', // Red\r\n      'person': '#6B7280' // Gray\r\n    };\r\n    return colors[category] || '#6B7280';\r\n  },\r\n\r\n  // Get recommendation priority color\r\n  getPriorityColor(priority) {\r\n    const colors = {\r\n      'high': '#EF4444', // Red\r\n      'medium': '#F59E0B', // Orange\r\n      'low': '#10B981' // Green\r\n    };\r\n    return colors[priority] || '#6B7280';\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,WAAAF,cAAA,GAAUD,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,eAAeL,MAAM,CAACM,GAAG,EAAE,CAAC;EAC9E,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACTL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACK,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,IAAK;EACZR,OAAO,CAACC,GAAG,CAAC,iBAAiBO,QAAQ,CAACV,MAAM,CAACM,GAAG,GAAG,EAAEI,QAAQ,CAACC,MAAM,CAAC;EACrE,OAAOD,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAK,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACTZ,OAAO,CAACK,KAAK,CAAC,iBAAiB,EAAE,EAAAK,eAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBG,IAAI,KAAIR,KAAK,CAACS,OAAO,CAAC;;EAEvE;EACA,IAAI,EAAAH,gBAAA,GAAAN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,uBAAdA,gBAAA,CAAgBF,MAAM,MAAK,GAAG,EAAE;IAClCJ,KAAK,CAACS,OAAO,GAAG,2DAA2D;EAC7E,CAAC,MAAM,IAAI,EAAAF,gBAAA,GAAAP,KAAK,CAACG,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBH,MAAM,MAAK,GAAG,EAAE;IACzCJ,KAAK,CAACS,OAAO,GAAG,8DAA8D;EAChF,CAAC,MAAM,IAAIT,KAAK,CAACU,IAAI,KAAK,cAAc,EAAE;IACxCV,KAAK,CAACS,OAAO,GAAG,oCAAoC;EACtD,CAAC,MAAM,IAAI,CAACT,KAAK,CAACG,QAAQ,EAAE;IAC1BH,KAAK,CAACS,OAAO,GAAG,8CAA8C;EAChE;EAEA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMW,UAAU,GAAG;EACxB;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMlB,GAAG,CAAC4B,GAAG,CAAC,SAAS,CAAC;MACzC,OAAOV,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAM,IAAIc,KAAK,CAAC,wBAAwBd,KAAK,CAACS,OAAO,EAAE,CAAC;IAC1D;EACF,CAAC;EAED;EACA,MAAMM,qBAAqBA,CAACC,IAAI,EAAEC,eAAe,GAAG,cAAc,EAAE;IAClE,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,IAAI,CAAC;MAC9BE,QAAQ,CAACE,MAAM,CAAC,iBAAiB,EAAEH,eAAe,CAAC;MAEnD,MAAMd,QAAQ,GAAG,MAAMlB,GAAG,CAACoC,IAAI,CAAC,SAAS,EAAEH,QAAQ,EAAE;QACnD7B,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDiC,gBAAgB,EAAGC,aAAa,IAAK;UACnC,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAChCH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;UACDjC,OAAO,CAACC,GAAG,CAAC,oBAAoB4B,gBAAgB,GAAG,CAAC;QACtD;MACF,CAAC,CAAC;MAEF,OAAOrB,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAM,IAAIc,KAAK,CAAC,kBAAkBd,KAAK,CAACS,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED;EACA,MAAMoB,oBAAoBA,CAACC,QAAQ,EAAEb,eAAe,GAAG,cAAc,EAAE;IACrE,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMlB,GAAG,CAACoC,IAAI,CAAC,iBAAiB,EAAE;QACjDS,QAAQ;QACRb;MACF,CAAC,CAAC;MACF,OAAOd,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAM,IAAIc,KAAK,CAAC,oBAAoBd,KAAK,CAACS,OAAO,EAAE,CAAC;IACtD;EACF,CAAC;EAED;EACA,MAAMsB,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAM5B,QAAQ,GAAG,MAAMlB,GAAG,CAAC4B,GAAG,CAAC,eAAe,CAAC;MAC/C,OAAOV,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAM,IAAIc,KAAK,CAAC,0BAA0Bd,KAAK,CAACS,OAAO,EAAE,CAAC;IAC5D;EACF,CAAC;EAED;EACA,MAAMuB,UAAUA,CAACF,QAAQ,EAAE;IACzB,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMlB,GAAG,CAACgD,MAAM,CAAC,WAAWH,QAAQ,EAAE,CAAC;MACxD,OAAO3B,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAM,IAAIc,KAAK,CAAC,0BAA0Bd,KAAK,CAACS,OAAO,EAAE,CAAC;IAC5D;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMyB,KAAK,GAAG;EACnB;EACAC,cAAcA,CAACC,KAAK,EAAE;IACpB,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IACjC,MAAMC,CAAC,GAAG,IAAI;IACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACzC,MAAMC,CAAC,GAAGd,IAAI,CAACe,KAAK,CAACf,IAAI,CAAC7B,GAAG,CAACwC,KAAK,CAAC,GAAGX,IAAI,CAAC7B,GAAG,CAACyC,CAAC,CAAC,CAAC;IACnD,OAAOI,UAAU,CAAC,CAACL,KAAK,GAAGX,IAAI,CAACiB,GAAG,CAACL,CAAC,EAAEE,CAAC,CAAC,EAAEI,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGL,KAAK,CAACC,CAAC,CAAC;EACzE,CAAC;EAED;EACAK,UAAUA,CAACC,UAAU,EAAE;IACrB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,CAAC,GAAG,GAAG,GAAGF,IAAI,CAACG,kBAAkB,CAAC,CAAC;EACpE,CAAC;EAED;EACAC,gBAAgBA,CAACpB,QAAQ,EAAE;IACzB,OAAOA,QAAQ,CAACqB,KAAK,CAAC,CAACrB,QAAQ,CAACsB,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;EAClE,CAAC;EAED;EACAC,iBAAiBA,CAACrC,IAAI,EAAE;IACtB,MAAMsC,YAAY,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;IAC3E,MAAMC,OAAO,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;;IAElC,IAAI,CAACD,YAAY,CAACE,QAAQ,CAACxC,IAAI,CAACyC,IAAI,CAAC,EAAE;MACrC,MAAM,IAAI3C,KAAK,CAAC,8DAA8D,CAAC;IACjF;IAEA,IAAIE,IAAI,CAAC0C,IAAI,GAAGH,OAAO,EAAE;MACvB,MAAM,IAAIzC,KAAK,CAAC,2DAA2D,CAAC;IAC9E;IAEA,OAAO,IAAI;EACb,CAAC;EAED;EACA6C,mBAAmBA,CAAA,EAAG;IACpB,OAAO,CACL;MAAEC,KAAK,EAAE,cAAc;MAAEC,KAAK,EAAE,mBAAmB;MAAEC,WAAW,EAAE;IAAgE,CAAC,EACnI;MAAEF,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE,qBAAqB;MAAEC,WAAW,EAAE;IAAmD,CAAC,EACzH;MAAEF,KAAK,EAAE,YAAY;MAAEC,KAAK,EAAE,YAAY;MAAEC,WAAW,EAAE;IAAkC,CAAC,EAC5F;MAAEF,KAAK,EAAE,YAAY;MAAEC,KAAK,EAAE,YAAY;MAAEC,WAAW,EAAE;IAAkC,CAAC,EAC5F;MAAEF,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE,mBAAmB;MAAEC,WAAW,EAAE;IAA4B,CAAC,CAC3F;EACH,CAAC;EAED;EACAC,gBAAgBA,CAACC,QAAQ,EAAE;IACzB,MAAMC,MAAM,GAAG;MACb,iBAAiB,EAAE,SAAS;MAAE;MAC9B,YAAY,EAAE,SAAS;MAAE;MACzB,gBAAgB,EAAE,SAAS;MAAE;MAC7B,iBAAiB,EAAE,SAAS;MAAE;MAC9B,iBAAiB,EAAE,SAAS;MAAE;MAC9B,QAAQ,EAAE,SAAS,CAAC;IACtB,CAAC;IACD,OAAOA,MAAM,CAACD,QAAQ,CAAC,IAAI,SAAS;EACtC,CAAC;EAED;EACAE,gBAAgBA,CAACC,QAAQ,EAAE;IACzB,MAAMF,MAAM,GAAG;MACb,MAAM,EAAE,SAAS;MAAE;MACnB,QAAQ,EAAE,SAAS;MAAE;MACrB,KAAK,EAAE,SAAS,CAAC;IACnB,CAAC;IACD,OAAOA,MAAM,CAACE,QAAQ,CAAC,IAAI,SAAS;EACtC;AACF,CAAC;AAED,eAAelF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}